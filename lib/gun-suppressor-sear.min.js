!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("ramda"),require("route-parser"),require("gun-suppressor"),require("gun/gun"),require("gun/sea")):"function"==typeof define&&define.amd?define("gun-suppressor-sear",["ramda","route-parser","gun-suppressor","gun/gun","gun/sea"],r):"object"==typeof exports?exports["gun-suppressor-sear"]=r(require("ramda"),require("route-parser"),require("gun-suppressor"),require("gun/gun"),require("gun/sea")):e["gun-suppressor-sear"]=r(e.ramda,e["route-parser"],e["gun-suppressor"],e["gun/gun"],e["gun/sea"])}("undefined"!=typeof self?self:this,function(e,r,t,n,o){return function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(n,o,function(r){return e[r]}.bind(null,o));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=0)}([function(e,r,t){"use strict";(function(e){Object.defineProperty(r,"__esModule",{value:!0}),r.initAjv=r.read=r.PERMISSIVE_SCHEMA=r.PERMISSIVE_NODE_SCHEMA=r.AUTH_SCHEMA=void 0;var n,o=t(2),i=(n=t(3))&&n.__esModule?n:{default:n},u=t(4);e.Gun=e.Gun||t(5);var s=t(6),a=s.verify,p=s.opt.unpack,f=new i.default("~:authorId"),d=new i.default("*stuff~:authorId."),c={seaAlias:{type:"string",maxLength:512},SEAAlias:{title:"Gun SEA Alias",$async:!0,soul:{pattern:"~@:alias",properties:{alias:{$ref:"schema.json#/definitions/seaAlias"}},required:["alias"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/SEAAuthorEdge"}]}},seaAuthorId:{type:"string",maxLength:128},seaAuthObj:{oneOf:[{type:"object",properties:{ek:{type:"string"},s:{type:"string"}}},{type:"string"}]},SEAAuthor:{title:"Gun SEA Author",$async:!0,properties:{pub:{$ref:"#/definitions/seaAuthorId"},epub:{sea:{type:"string"}},alias:{sea:{$ref:"schema.json#/definitions/seaAlias"}},auth:{sea:{$ref:"schema.json#/definitions/seaAuthObj"}}},additionalProperties:{sea:{anyOf:[{$ref:"schema.json#/definitions/GunEdge"},{$ref:"schema.json#/definitions/seaAuthObj"},{type:"null"},{type:"string"},{type:"number"},{type:"boolean"}]}},soul:{pattern:"~:authorId",properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]}}};r.AUTH_SCHEMA=c;var l={title:"Gun SEA Node",description:"Any SEA node supported by gun",$async:!0,soul:{pattern:"*path~:authorId.",properties:{path:{type:"string"},authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["path","authorId"]},additionalProperties:{".*":{sea:{anyOf:[{$ref:"schema.json#/definitions/GunNodeMeta"},{$ref:"schema.json#/definitions/GunEdge"},{type:"null"},{type:"string"},{type:"number"},{type:"boolean"}]}}}};r.PERMISSIVE_NODE_SCHEMA=l;var h={...c,SEANode:l,...u.PERMISSIVE_SCHEMA};r.PERMISSIVE_SCHEMA=h;var y=function(e,r){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return a(p(e[r],r,e),t).then(function(t){if(void 0===t)throw new Error("invalid sea data");return p(t,r,e)})};r.read=y;var g=function(e){return function(r,t,n,i,u,s){var a=(0,o.path)(["_","#"],u);if("_"===s)return!0;var p=(d.match(a)||f.match(a)||{}).authorId;if(!p)return!1;if(a==="~".concat(p)&&"pub"===s)return t===p;var c,l,h,g,A=e.compile({additionalProperties:!0,properties:(c={},l=s,h=r,l in c?Object.defineProperty(c,l,{value:h,enumerable:!0,configurable:!0,writable:!0}):c[l]=h,c)});return y(u,s,p).then(function(e){return g=e}).then(function(e){return(0,o.assoc)(s,e,u)}).catch(function(e){return console.error("key err",a,s,e.stack||e),!1}).then(function(e){return e?Promise.resolve(A()).then(function(e){return e||console.error("sea validation err",a,s,g,A.errors,n),e}):(delete u[s],delete((0,o.path)(["_",">"],u)||{})[s],console.error("sea prop err",a,s,g,n),e)})}},A=(0,o.compose)(function(e){return e.addKeyword("sea",{async:!0,modifying:!0,validate:g(e)}),e},u.initAjv);r.initAjv=A}).call(this,t(1))},function(e,r){var t;t=function(){return this}();try{t=t||new Function("return this")()}catch(e){"object"==typeof window&&(t=window)}e.exports=t},function(r,t){r.exports=e},function(e,t){e.exports=r},function(e,r){e.exports=t},function(e,r){e.exports=n},function(e,r){e.exports=o}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,