!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("ramda"),require("route-parser"),require("@notabug/gun-suppressor")):"function"==typeof define&&define.amd?define("@notabug/gun-suppressor-sear",["ramda","route-parser","@notabug/gun-suppressor"],r):"object"==typeof exports?exports["@notabug/gun-suppressor-sear"]=r(require("ramda"),require("route-parser"),require("@notabug/gun-suppressor")):e["@notabug/gun-suppressor-sear"]=r(e.ramda,e["route-parser"],e["@notabug/gun-suppressor"])}("undefined"!=typeof self?self:this,function(e,r,t){return function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(n,o,function(r){return e[r]}.bind(null,o));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=0)}([function(e,r,t){"use strict";(function(e){Object.defineProperty(r,"__esModule",{value:!0}),r.initAjv=r.read=r.PERMISSIVE_SCHEMA=r.PERMISSIVE_NODE_SCHEMA=r.AUTH_SCHEMA=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,t):{};n.get||n.set?Object.defineProperty(r,t,n):r[t]=e[t]}return r.default=e,r}(t(2)),i=(n=t(3))&&n.__esModule?n:{default:n},a=t(4);var u=new i.default("~:authorId"),s=new i.default("*stuff~:authorId."),p={seaAlias:{type:"string",maxLength:512},SEAAlias:{title:"Gun SEA Alias",$async:!0,soul:{pattern:"~@:alias",properties:{alias:{$ref:"schema.json#/definitions/seaAlias"}},required:["alias"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/SEAAuthorEdge"}]}},seaAuthorId:{type:"string",maxLength:128},seaAuthObj:{oneOf:[{type:"object",properties:{ek:{type:"string"},s:{type:"string"}}},{type:"string"}]},SEAAuthor:{title:"Gun SEA Author",$async:!0,properties:{pub:{$ref:"#/definitions/seaAuthorId"},epub:{sea:{type:"string"}},alias:{sea:{$ref:"schema.json#/definitions/seaAlias"}},auth:{sea:{$ref:"schema.json#/definitions/seaAuthObj"}}},additionalProperties:{sea:{anyOf:[{$ref:"schema.json#/definitions/GunEdge"},{$ref:"schema.json#/definitions/seaAuthObj"},{type:"null"},{type:"string"},{type:"number"},{type:"boolean"}]}},soul:{pattern:"~:authorId",properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]}}};r.AUTH_SCHEMA=p;var f={title:"Gun SEA Node",description:"Any SEA node supported by gun",$async:!0,soul:{pattern:"*path~:authorId.",properties:{path:{type:"string"},authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["path","authorId"]},additionalProperties:{".*":{sea:{anyOf:[{$ref:"schema.json#/definitions/GunNodeMeta"},{$ref:"schema.json#/definitions/GunEdge"},{type:"null"},{type:"string"},{type:"number"},{type:"boolean"}]}}}};r.PERMISSIVE_NODE_SCHEMA=f;var d={...p,SEANode:f,...a.PERMISSIVE_SCHEMA};r.PERMISSIVE_SCHEMA=d;var c=function(e,r,t){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=e.SEA.opt.pack(r[t],t,r,o.path(["_","#"],r));return e.SEA.verify(i,n).then(function(n){if(void 0===n)throw new Error("invalid sea data");return e.SEA.opt.unpack(n,t,r)})};r.read=c;var l=function(e,r){return function(t,n,i,a,p,f){var d=o.path(["_","#"],p);if("_"===f)return!0;var l=(s.match(d)||u.match(d)||{}).authorId;if(!l)return!1;if(d==="~".concat(l)&&"pub"===f)return n===l;var y,h,b,g,A=r.compile({additionalProperties:!0,properties:(y={},h=f,b=t,h in y?Object.defineProperty(y,h,{value:b,enumerable:!0,configurable:!0,writable:!0}):y[h]=b,y)});return c(e,p,f,l).then(function(e){return g=e}).then(function(e){return o.assoc(f,e,p)}).catch(function(e){return console.error("key err",d,f,l,p[f],e.stack||e),!1}).then(function(e){return e&&void 0!==e[f]?Promise.resolve(A(e)).then(function(e){return e||console.error("sea validation err",d,f,g,A.errors,i),e}):(delete p[f],delete(o.path(["_",">"],p)||{})[f],console.error("sea prop err",d,f,g,i),e)})}};r.initAjv=function(r){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.Gun;return o.compose(function(e){return e.addKeyword("sea",{async:!0,modifying:!0,validate:l(t,e)}),e},a.initAjv)(r)}}).call(this,t(1))},function(e,r){var t;t=function(){return this}();try{t=t||new Function("return this")()}catch(e){"object"==typeof window&&(t=window)}e.exports=t},function(r,t){r.exports=e},function(e,t){e.exports=r},function(e,r){e.exports=t}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,