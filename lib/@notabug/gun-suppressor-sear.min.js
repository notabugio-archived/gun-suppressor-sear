!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("ramda"),require("route-parser"),require("@notabug/gun-suppressor")):"function"==typeof define&&define.amd?define("@notabug/gun-suppressor-sear",["ramda","route-parser","@notabug/gun-suppressor"],t):"object"==typeof exports?exports["@notabug/gun-suppressor-sear"]=t(require("ramda"),require("route-parser"),require("@notabug/gun-suppressor")):e["@notabug/gun-suppressor-sear"]=t(e.ramda,e["route-parser"],e["@notabug/gun-suppressor"])}("undefined"!=typeof self?self:this,function(e,t,r){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.initAjv=t.read=t.PERMISSIVE_SCHEMA=t.PERMISSIVE_NODE_SCHEMA=t.AUTH_SCHEMA=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(2)),i=(n=r(3))&&n.__esModule?n:{default:n},a=r(4);var u=new i.default("~:authorId"),s=new i.default("*stuff~:authorId."),p={seaAlias:{type:"string",maxLength:512},SEAAlias:{title:"Gun SEA Alias",$async:!0,soul:{pattern:"~@:alias",properties:{alias:{$ref:"schema.json#/definitions/seaAlias"}},required:["alias"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/SEAAuthorEdge"}]}},seaAuthorId:{type:"string",maxLength:128},seaAuthObj:{oneOf:[{type:"object",properties:{ek:{type:"object",properties:{ct:{type:"string"},iv:{type:"string"},s:{type:"string"}}},s:{type:"string"}}},{type:"string"}]},SEAAuthor:{title:"Gun SEA Author",$async:!0,properties:{pub:{$ref:"#/definitions/seaAuthorId"},epub:{sea:{type:"string"}},alias:{sea:{$ref:"schema.json#/definitions/seaAlias"}},auth:{sea:{$ref:"schema.json#/definitions/seaAuthObj"}}},additionalProperties:{sea:{anyOf:[{$ref:"schema.json#/definitions/GunEdge"},{$ref:"schema.json#/definitions/seaAuthObj"},{type:"null"},{type:"string"},{type:"number"},{type:"boolean"}]}},soul:{pattern:"~:authorId",properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]}}};t.AUTH_SCHEMA=p;var f={title:"Gun SEA Node",description:"Any SEA node supported by gun",$async:!0,soul:{pattern:"*path~:authorId.",properties:{path:{type:"string"},authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["path","authorId"]},additionalProperties:{".*":{sea:{anyOf:[{$ref:"schema.json#/definitions/GunNodeMeta"},{$ref:"schema.json#/definitions/GunEdge"},{type:"null"},{type:"string"},{type:"number"},{type:"boolean"}]}}}};t.PERMISSIVE_NODE_SCHEMA=f;var d={...p,SEANode:f,...a.PERMISSIVE_SCHEMA};t.PERMISSIVE_SCHEMA=d;var c=function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=e.SEA.opt.pack(t[r],r,t,o.path(["_","#"],t));return e.SEA.verify(i,n).then(function(n){if(void 0===n)throw new Error("invalid sea data");return e.SEA.opt.unpack(n,r,t)})};t.read=c;var l=function(e,t){return function(r,n,i,a,p,f){var d=o.path(["_","#"],p);if("_"===f)return!0;var l=(s.match(d)||u.match(d)||{}).authorId;if(!l)return!1;if(d==="~".concat(l)&&"pub"===f)return n===l;var y,h,b,g,v=t.compile({additionalProperties:!0,properties:(y={},h=f,b=r,h in y?Object.defineProperty(y,h,{value:b,enumerable:!0,configurable:!0,writable:!0}):y[h]=b,y)});return c(e,p,f,l).then(function(e){return g=e}).then(function(e){return o.assoc(f,e,p)}).catch(function(e){return console.error("key err",d,f,l,p[f],e.stack||e),!1}).then(function(e){return e&&void 0!==e[f]?Promise.resolve(v(e)).then(function(e){return e||console.error("sea validation err",d,f,g,v.errors,i),e}):(delete p[f],delete(o.path(["_",">"],p)||{})[f],console.error("sea prop err",d,f,g,i),e)})}};t.initAjv=function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.Gun;return o.compose(function(e){return e.addKeyword("sea",{async:!0,modifying:!0,validate:l(r,e)}),e},a.initAjv)(t)}}).call(this,r(1))},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(t,r){t.exports=e},function(e,r){e.exports=t},function(e,t){e.exports=r}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,