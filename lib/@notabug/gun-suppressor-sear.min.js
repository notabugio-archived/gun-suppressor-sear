!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("ramda"),require("route-parser"),require("@notabug/gun-suppressor"),require("gun/gun"),require("gun/sea")):"function"==typeof define&&define.amd?define("@notabug/gun-suppressor-sear",["ramda","route-parser","@notabug/gun-suppressor","gun/gun","gun/sea"],r):"object"==typeof exports?exports["@notabug/gun-suppressor-sear"]=r(require("ramda"),require("route-parser"),require("@notabug/gun-suppressor"),require("gun/gun"),require("gun/sea")):e["@notabug/gun-suppressor-sear"]=r(e.ramda,e["route-parser"],e["@notabug/gun-suppressor"],e["gun/gun"],e["gun/sea"])}("undefined"!=typeof self?self:this,function(e,r,t,n,o){return function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(n,o,function(r){return e[r]}.bind(null,o));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=0)}([function(e,r,t){"use strict";(function(e){Object.defineProperty(r,"__esModule",{value:!0}),r.initAjv=r.read=r.PERMISSIVE_SCHEMA=r.PERMISSIVE_NODE_SCHEMA=r.AUTH_SCHEMA=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,t):{};n.get||n.set?Object.defineProperty(r,t,n):r[t]=e[t]}return r.default=e,r}(t(2)),u=(n=t(3))&&n.__esModule?n:{default:n},i=t(4);e.Gun=e.Gun||t(5);var a=t(6),s=a.verify,p=a.opt,f=p.pack,d=p.unpack,c=new u.default("~:authorId"),l=new u.default("*stuff~:authorId."),y={seaAlias:{type:"string",maxLength:512},SEAAlias:{title:"Gun SEA Alias",$async:!0,soul:{pattern:"~@:alias",properties:{alias:{$ref:"schema.json#/definitions/seaAlias"}},required:["alias"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/SEAAuthorEdge"}]}},seaAuthorId:{type:"string",maxLength:128},seaAuthObj:{oneOf:[{type:"object",properties:{ek:{type:"string"},s:{type:"string"}}},{type:"string"}]},SEAAuthor:{title:"Gun SEA Author",$async:!0,properties:{pub:{$ref:"#/definitions/seaAuthorId"},epub:{sea:{type:"string"}},alias:{sea:{$ref:"schema.json#/definitions/seaAlias"}},auth:{sea:{$ref:"schema.json#/definitions/seaAuthObj"}}},additionalProperties:{sea:{anyOf:[{$ref:"schema.json#/definitions/GunEdge"},{$ref:"schema.json#/definitions/seaAuthObj"},{type:"null"},{type:"string"},{type:"number"},{type:"boolean"}]}},soul:{pattern:"~:authorId",properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]}}};r.AUTH_SCHEMA=y;var h={title:"Gun SEA Node",description:"Any SEA node supported by gun",$async:!0,soul:{pattern:"*path~:authorId.",properties:{path:{type:"string"},authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["path","authorId"]},additionalProperties:{".*":{sea:{anyOf:[{$ref:"schema.json#/definitions/GunNodeMeta"},{$ref:"schema.json#/definitions/GunEdge"},{type:"null"},{type:"string"},{type:"number"},{type:"boolean"}]}}}};r.PERMISSIVE_NODE_SCHEMA=h;var g={...y,SEANode:h,...i.PERMISSIVE_SCHEMA};r.PERMISSIVE_SCHEMA=g;var b=function(e,r){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=f(e[r],r,e,o.path(["_","#"],e));return s(n,t).then(function(t){if(void 0===t)throw new Error("invalid sea data");return d(t,r,e)})};r.read=b;var v=function(e){return function(r,t,n,u,i,a){var s=o.path(["_","#"],i);if("_"===a)return!0;var p=(l.match(s)||c.match(s)||{}).authorId;if(!p)return!1;if(s==="~".concat(p)&&"pub"===a)return t===p;var f,d,y,h,g=e.compile({additionalProperties:!0,properties:(f={},d=a,y=r,d in f?Object.defineProperty(f,d,{value:y,enumerable:!0,configurable:!0,writable:!0}):f[d]=y,f)});return b(i,a,p).then(function(e){return h=e}).then(function(e){return o.assoc(a,e,i)}).catch(function(e){return void 0!==i[a]&&(console.error("key err",s,a,p,i[a],e.stack||e),!1)}).then(function(e){return e?Promise.resolve(g()).then(function(e){return e||console.error("sea validation err",s,a,h,g.errors,n),e}):(delete i[a],delete(o.path(["_",">"],i)||{})[a],e)})}},A=o.compose(function(e){return e.addKeyword("sea",{async:!0,modifying:!0,validate:v(e)}),e},i.initAjv);r.initAjv=A}).call(this,t(1))},function(e,r){var t;t=function(){return this}();try{t=t||new Function("return this")()}catch(e){"object"==typeof window&&(t=window)}e.exports=t},function(r,t){r.exports=e},function(e,t){e.exports=r},function(e,r){e.exports=t},function(e,r){e.exports=n},function(e,r){e.exports=o}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,